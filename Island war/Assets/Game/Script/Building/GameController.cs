using UnityEngine;
using Sirenix.OdinInspector;
using System.Collections.Generic;

public class GameController : Singleton<GameController>
{
    [Title("Manager References")]
    [SerializeField, Required] private BuidingManager buidingManager;
    
    public BuidingManager BuidingManager => buidingManager;

    [Title("Data References")]
    [Tooltip("K√©o file ScriptableObject BuildingData c·ªßa b·∫°n v√†o ƒë√¢y")]
    [SerializeField, Required] public BuildingData BuildingData; 
    [Tooltip("K√©o file ScriptableObject SoldierData b·∫°n v·ª´a t·∫°o v√†o ƒë√¢y")]
    [SerializeField, Required] public SoldierData soldierData;   

    [Title("Soldier Inventory")]
    [ShowInInspector, ReadOnly]
    // Dictionary ƒë·ªÉ l∆∞u s·ªë l∆∞·ª£ng l√≠nh: Key = ID l√≠nh, Value = S·ªë l∆∞·ª£ng
    private Dictionary<int, int> soldierInventory = new Dictionary<int, int>();

    public override void Awake()
    {
        base.Awake();
        InitializeSoldierInventory();
    }

    private void Start()
    {
        buidingManager.Initialize();
    }
    
    /// <summary>
    /// Kh·ªüi t·∫°o kho l√≠nh v·ªõi s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 0 cho t·∫•t c·∫£ c√°c lo·∫°i l√≠nh.
    /// </summary>
    private void InitializeSoldierInventory()
    {
        if (BuildingData == null)
        {
            Debug.LogError("BuildingData ch∆∞a ƒë∆∞·ª£c g√°n trong GameController!");
            return;
        }

        foreach (var soldierItem in BuildingData.soldierLayerItems)
        {
            if (!soldierInventory.ContainsKey(soldierItem.id))
            {
                soldierInventory.Add(soldierItem.id, 0);
            }
        }
        Debug.Log("‚úÖ Kho l√≠nh ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 0.");
    }

    /// <summary>
    /// Th√™m m·ªôt s·ªë l∆∞·ª£ng l√≠nh v√†o kho.
    /// </summary>
    public void AddSoldier(int soldierId, int amount = 1)
    {
        if (soldierInventory.ContainsKey(soldierId))
        {
            soldierInventory[soldierId] += amount;
            Debug.Log($"üëç ƒê√£ c·ªông {amount} l√≠nh (ID: {soldierId}). T·ªïng s·ªë: {soldierInventory[soldierId]}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l√≠nh v·ªõi ID {soldierId} trong kho!");
        }
    }

    /// <summary>
    /// Ti√™u th·ª• (tr·ª´ ƒëi) m·ªôt ƒë∆°n v·ªã l√≠nh t·ª´ kho. D√πng sau khi x√¢y nh√† l√≠nh.
    /// </summary>
    /// <param name="soldierId">ID c·ªßa l√≠nh c·∫ßn ti√™u th·ª•.</param>
    public void UseSoldier(int soldierId)
    {
        if (soldierInventory.ContainsKey(soldierId) && soldierInventory[soldierId] > 0)
        {
            soldierInventory[soldierId]--;
            Debug.Log($"‚úîÔ∏è ƒê√£ s·ª≠ d·ª•ng 1 l√≠nh (ID: {soldierId}). C√≤n l·∫°i: {soldierInventory[soldierId]}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Kh√¥ng th·ªÉ s·ª≠ d·ª•ng l√≠nh ID {soldierId} v√¨ kh√¥ng c√≥ trong kho!");
        }
    }

    /// <summary>
    /// L·∫•y s·ªë l∆∞·ª£ng c·ªßa m·ªôt lo·∫°i l√≠nh c·ª• th·ªÉ.
    /// </summary>
    public int GetSoldierCount(int soldierId)
    {
        soldierInventory.TryGetValue(soldierId, out int count);
        return count;
    }
}